{"version":3,"file":"default.af1d79c7.js","sources":["../../src/pane.tsx","../../src/base.ts","../../src/sash.tsx","../../src/SplitPane.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\r\nimport { HTMLElementProps, IPaneConfigs } from './types';\r\n\r\nexport default function Pane({\r\n    children,\r\n    style,\r\n    className,\r\n    role,\r\n    title\r\n}: PropsWithChildren<HTMLElementProps & IPaneConfigs>) {\r\n    return (\r\n        <div\r\n            role={role}\r\n            title={title}\r\n            className={className}\r\n            style={style}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * Element names may consist of Latin letters, digits, dashes and underscores.\r\n * CSS class is formed as block name plus two underscores plus element name: .block__elem\r\n * @param block\r\n * @param element\r\n */\r\nfunction getBEMElement(block: string, element: string) {\r\n    return `${block}__${element}`;\r\n}\r\n\r\n/**\r\n * CSS class is formed as block’s or element’s name plus two dashes:\r\n * .block--mod or .block__elem--mod and .block--color-black with .block--color-red.\r\n * Spaces in complicated modifiers are replaced by dash.\r\n * @param blockOrElement\r\n * @param modifier\r\n */\r\nfunction getBEMModifier(blockOrElement: string, modifier: string) {\r\n    return `${blockOrElement}--${modifier}`;\r\n}\r\n\r\nexport const splitClassName = 'react-split';\r\nexport const splitDragClassName = getBEMModifier(splitClassName, 'dragging');\r\nexport const splitVerticalClassName = getBEMModifier(splitClassName, 'vertical');\r\nexport const splitHorizontalClassName = getBEMModifier(splitClassName, 'horizontal');\r\n\r\nexport const bodyDisableUserSelect = getBEMModifier(splitClassName, 'disabled');\r\nexport const paneClassName = getBEMElement(splitClassName, 'pane');\r\nexport const sashClassName = getBEMElement(splitClassName, 'sash');\r\n\r\nexport const sashVerticalClassName = getBEMModifier(\r\n    sashClassName,\r\n    'vertical'\r\n);\r\nexport const sashHorizontalClassName = getBEMModifier(\r\n    sashClassName,\r\n    'horizontal'\r\n);\r\nexport const sashDisabledClassName = getBEMModifier(\r\n    sashClassName,\r\n    'disabled'\r\n);\r\nexport const sashHoverClassName = getBEMModifier(sashClassName, 'hover');\r\n\r\nexport function classNames(...args) {\r\n    const classList: string[] = [];\r\n    for (const arg of args) {\r\n        if (!arg) continue;\r\n        const argType = typeof arg;\r\n        if (argType === 'string' || argType === 'number') {\r\n            classList.push(`${arg}`);\r\n            continue;\r\n        }\r\n        if (argType === 'object') {\r\n            if (arg.toString !== Object.prototype.toString) {\r\n                classList.push(arg.toString());\r\n                continue;\r\n            }\r\n            for (const key in arg) {\r\n                if (Object.hasOwnProperty.call(arg, key) && arg[key]) {\r\n                    classList.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return classList.join(' ');\r\n}\r\n\r\n/**\r\n * Convert size to absolute number or Infinity\r\n * SplitPane allows sizes in string and number, but the state sizes only support number,\r\n * so convert string and number to number in here\r\n * 'auto' -> divide the remaining space equally\r\n * 'xxxpx' -> xxx\r\n * 'xxx%' -> wrapper.size * xxx/100\r\n *  xxx -> xxx\r\n */\r\nexport function assertsSize (\r\n    size: string | number | undefined,\r\n    sum: number,\r\n    defaultValue = Infinity\r\n) {\r\n    if (typeof size === 'undefined') return defaultValue;\r\n    if (typeof size === 'number') return size;\r\n    if (size.endsWith('%')) return sum * (+size.replace('%', '') / 100);\r\n    if (size.endsWith('px')) return +size.replace('px', '');\r\n    return defaultValue;\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport {\r\n    classNames,\r\n    sashHoverClassName,\r\n    sashClassName\r\n} from './base';\r\nimport { ISashProps } from './types';\r\n\r\nexport default function Sash({\r\n    className,\r\n    onDragStart,\r\n    onDragging,\r\n    onDragEnd,\r\n    ...others\r\n}: ISashProps) {\r\n    const timeout = useRef<number | null>(null);\r\n    const [active, setActive] = useState(false);\r\n    const [draging, setDrag] = useState(false);\r\n\r\n    const handleMouseMove = function (e) {\r\n        onDragging(e);\r\n    };\r\n\r\n    const handleMouseUp = function (e) {\r\n        setDrag(false);\r\n        onDragEnd(e);\r\n        window.removeEventListener('mousemove', handleMouseMove);\r\n        window.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            role=\"Resizer\"\r\n            className={classNames(\r\n                sashClassName,\r\n                (draging || active) && sashHoverClassName,\r\n                className\r\n            )}\r\n            onMouseEnter={() => {\r\n                timeout.current = setTimeout(() => {\r\n                    setActive(true);\r\n                }, 150);\r\n            }}\r\n            onMouseLeave={() => {\r\n                if (timeout.current) {\r\n                    setActive(false);\r\n                    clearTimeout(timeout.current);\r\n                }\r\n            }}\r\n            onMouseDown={e => {\r\n                setDrag(true);\r\n                onDragStart(e);\r\n\r\n                window.addEventListener('mousemove', handleMouseMove);\r\n                window.addEventListener('mouseup', handleMouseUp);\r\n            }}\r\n            {...others}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useMemo, useCallback, useRef, useState } from 'react';\r\nimport Pane from './pane';\r\nimport Sash from './sash';\r\nimport {\r\n    classNames,\r\n    bodyDisableUserSelect,\r\n    paneClassName,\r\n    splitClassName,\r\n    splitDragClassName,\r\n    splitVerticalClassName,\r\n    splitHorizontalClassName,\r\n    sashDisabledClassName,\r\n    sashHorizontalClassName,\r\n    sashVerticalClassName,\r\n    assertsSize\r\n} from './base';\r\nimport { IAxis, ISplitProps, IPaneConfigs, ICacheSizes } from './types';\r\n\r\nconst SplitPane = ({\r\n    children,\r\n    sizes: propSizes,\r\n    allowResize = true,\r\n    split = 'vertical',\r\n    className: wrapClassName,\r\n    sashClassName,\r\n    resizerSize = 4,\r\n    performanceMode = false,\r\n    onChange = () => null,\r\n    onDragStart = () => null,\r\n    onDragEnd = () => null,\r\n    ...others\r\n}: ISplitProps) => {\r\n    const axis = useRef<IAxis>({ x: 0, y: 0 });\r\n    const wrapper = useRef<HTMLDivElement>(null);\r\n    const cacheSizes = useRef<ICacheSizes>({ sizes: [], sashPosSizes: [] });\r\n    const [wrapperRect, setWrapperRect] = useState({});\r\n    const [isDragging, setDragging] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const resizeObserver = new ResizeObserver(() => {\r\n            setWrapperRect(wrapper?.current?.getBoundingClientRect() ?? {});\r\n        });\r\n        resizeObserver.observe(wrapper.current!);\r\n        return () => {\r\n            resizeObserver.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    const {\r\n        sizeName,\r\n        splitPos,\r\n        splitAxis\r\n    } = useMemo(() => ({\r\n        sizeName: split === 'vertical' ? 'width' : 'height',\r\n        splitPos: split === 'vertical' ? 'left' : 'top',\r\n        splitAxis: split === 'vertical' ? 'x' : 'y'\r\n    }), [split]);\r\n\r\n    const wrapSize: number = wrapperRect[sizeName] ?? 0;\r\n\r\n    // Get limit sizes via children\r\n    const paneLimitSizes = useMemo(() => children.map(childNode => {\r\n        const limits = [0, Infinity];\r\n        if (childNode.type === Pane) {\r\n            const { minSize, maxSize } = childNode.props as IPaneConfigs;\r\n            limits[0] = assertsSize(minSize, wrapSize, 0);\r\n            limits[1] = assertsSize(maxSize, wrapSize);\r\n        }\r\n        return limits;\r\n    }), [children, wrapSize]);\r\n\r\n    const sizes = useMemo(function () {\r\n        let count = 0;\r\n        let curSum = 0;\r\n        const res = children.map((_, index) => {\r\n            const size = assertsSize(propSizes[index], wrapSize);\r\n            size === Infinity ? count++ : curSum += size;\r\n            return size;\r\n        });\r\n\r\n        // resize or illegal size input,recalculate pane sizes\r\n        if (curSum > wrapSize || !count && curSum < wrapSize) {\r\n            const cacheNum = (curSum - wrapSize) / curSum;\r\n            return res.map(size => {\r\n                return size === Infinity ? 0 : size - size * cacheNum;\r\n            });\r\n        }\r\n\r\n        if (count > 0) {\r\n            const average = (wrapSize - curSum) / count;\r\n            return res.map(size => {\r\n                return size === Infinity ? average : size;\r\n            });\r\n        }\r\n\r\n        return res;\r\n    }, [...propSizes, children.length, wrapSize]);\r\n\r\n    const sashPosSizes = useMemo(() => (\r\n        sizes.reduce((a, b) => [...a, a[a.length - 1] + b], [0])\r\n    ), [...sizes]);\r\n\r\n    const dragStart = useCallback(function (e) {\r\n        document?.body?.classList?.add(bodyDisableUserSelect);\r\n        axis.current = { x: e.pageX, y: e.pageY };\r\n        cacheSizes.current = { sizes, sashPosSizes };\r\n        setDragging(true);\r\n        onDragStart(e);\r\n    }, [onDragStart, sizes, sashPosSizes]);\r\n\r\n    const dragEnd = useCallback(function (e) {\r\n        document?.body?.classList?.remove(bodyDisableUserSelect);\r\n        axis.current = { x: e.pageX, y: e.pageY };\r\n        cacheSizes.current = { sizes, sashPosSizes };\r\n        setDragging(false);\r\n        onDragEnd(e);\r\n    }, [onDragEnd, sizes, sashPosSizes]);\r\n\r\n    const onDragging = useCallback(function (e, i) {\r\n        const curAxis = { x: e.pageX, y: e.pageY };\r\n        let distanceX = curAxis[splitAxis] - axis.current[splitAxis];\r\n\r\n        const leftBorder = -Math.min(\r\n            sizes[i] - paneLimitSizes[i][0],\r\n            paneLimitSizes[i + 1][1] - sizes[i + 1]\r\n        );\r\n        const rightBorder = Math.min(\r\n            sizes[i + 1] - paneLimitSizes[i + 1][0],\r\n            paneLimitSizes[i][1] - sizes[i]\r\n        );\r\n\r\n        if (distanceX < leftBorder) {\r\n            distanceX = leftBorder;\r\n        }\r\n        if (distanceX > rightBorder) {\r\n            distanceX = rightBorder;\r\n        }\r\n\r\n        const nextSizes = [...sizes];\r\n        nextSizes[i] += distanceX;\r\n        nextSizes[i + 1] -= distanceX;\r\n\r\n        onChange(nextSizes);\r\n    }, [paneLimitSizes, onChange]);\r\n\r\n    const paneFollow = !(performanceMode && isDragging);\r\n    const paneSizes = paneFollow ? sizes : cacheSizes.current.sizes;\r\n    const panePoses = paneFollow ? sashPosSizes:  cacheSizes.current.sashPosSizes;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                splitClassName,\r\n                split === 'vertical' && splitVerticalClassName,\r\n                split === 'horizontal' && splitHorizontalClassName,\r\n                isDragging && splitDragClassName,\r\n                wrapClassName\r\n            )}\r\n            ref={wrapper}\r\n            {...others}\r\n        >\r\n            {children.map((childNode, childIndex) => {\r\n                const isPane = childNode.type === Pane;\r\n                const paneProps = isPane ? childNode.props : {};\r\n\r\n                return (\r\n                    <Pane\r\n                        key={childIndex}\r\n                        className={classNames(paneClassName, paneProps.className)}\r\n                        style={{\r\n                            ...paneProps.style,\r\n                            [sizeName]: paneSizes[childIndex],\r\n                            [splitPos]: panePoses[childIndex]\r\n                        }}\r\n                    >\r\n                        {isPane ? paneProps.children : childNode}\r\n                    </Pane>\r\n                );\r\n            })}\r\n            {sashPosSizes.slice(1, -1).map((posSize, index) => (\r\n                <Sash\r\n                    key={index}\r\n                    className={classNames(\r\n                        !allowResize && sashDisabledClassName,\r\n                        split === 'vertical'\r\n                            ? sashVerticalClassName\r\n                            : sashHorizontalClassName,\r\n                        sashClassName\r\n                    )}\r\n                    style={{\r\n                        [sizeName]: resizerSize,\r\n                        [splitPos]: posSize- resizerSize / 2\r\n                    }}\r\n                    onDragStart={dragStart}\r\n                    onDragging={e => onDragging(e, index)}\r\n                    onDragEnd={dragEnd}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplitPane;\r\n"],"names":["Pane","children","style","className","role","_jsx","title","getBEMElement","block","element","getBEMModifier","blockOrElement","modifier","splitClassName","splitDragClassName","splitVerticalClassName","splitHorizontalClassName","bodyDisableUserSelect","paneClassName","sashClassName","sashVerticalClassName","sashHorizontalClassName","sashDisabledClassName","sashHoverClassName","classNames","args","classList","arg","argType","key","assertsSize","size","sum","defaultValue","Sash","onDragStart","onDragging","onDragEnd","timeout","useRef","active","setActive","useState","draging","setDrag","handleMouseMove","e","handleMouseUp","window","clearTimeout","others","SplitPane","propSizes","split","wrapClassName","performanceMode","onChange","axis","wrapper","cacheSizes","wrapperRect","setWrapperRect","isDragging","setDragging","useEffect","resizeObserver","sizeName","splitPos","splitAxis","wrapSize","_a","paneLimitSizes","useMemo","childNode","limits","minSize","maxSize","sizes","count","curSum","res","_","index","cacheNum","average","sashPosSizes","a","b","dragStart","useCallback","document","pageX","pageY","dragEnd","i","distanceX","leftBorder","rightBorder","nextSizes","paneFollow","paneSizes","panePoses","_jsxs","isPane","paneProps","childIndex","posSize","allowResize","resizerSize"],"mappings":"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"}