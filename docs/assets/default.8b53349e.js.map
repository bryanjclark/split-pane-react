{"version":3,"file":"default.8b53349e.js","sources":["../../src/pane.tsx","../../src/base.ts","../../src/sash.tsx","../../src/SplitPane.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\r\n\r\ninterface HTMLElementProps {\r\n    title?: string;\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n    role?: string;\r\n}\r\n\r\nexport interface IPaneConfigs {\r\n    maxSize?: number | string;\r\n    minSize?: number | string;\r\n}\r\n\r\nexport default function Pane({\r\n    children,\r\n    style,\r\n    className,\r\n    role,\r\n    title,\r\n}: PropsWithChildren<HTMLElementProps & IPaneConfigs>) {\r\n    return (\r\n        <div role={role} title={title} className={className} style={style}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","\r\n/**\r\n * Element names may consist of Latin letters, digits, dashes and underscores.\r\n * CSS class is formed as block name plus two underscores plus element name: .block__elem\r\n * @param block\r\n * @param element\r\n */\r\nfunction getBEMElement(block: string, element: string) {\r\n    return `${block}__${element}`;\r\n}\r\n\r\n/**\r\n * CSS class is formed as block’s or element’s name plus two dashes:\r\n * .block--mod or .block__elem--mod and .block--color-black with .block--color-red.\r\n * Spaces in complicated modifiers are replaced by dash.\r\n * @param blockOrElement\r\n * @param modifier\r\n */\r\nfunction getBEMModifier(blockOrElement: string, modifier: string) {\r\n    return `${blockOrElement}--${modifier}`;\r\n}\r\n\r\nexport const splitClassName = 'react-split';\r\nexport const splitDragClassName = getBEMModifier(splitClassName, 'dragging');\r\nexport const splitVerticalClassName = getBEMModifier(splitClassName, 'vertical');\r\nexport const splitHorizontalClassName = getBEMModifier(splitClassName, 'horizontal');\r\n\r\nexport const paneClassName = getBEMElement(splitClassName, 'pane');\r\nexport const sashClassName = getBEMElement(splitClassName, 'sash');\r\n\r\nexport const sashVerticalClassName = getBEMModifier(\r\n    sashClassName,\r\n    'vertical'\r\n);\r\nexport const sashHorizontalClassName = getBEMModifier(\r\n    sashClassName,\r\n    'horizontal'\r\n);\r\nexport const sashDisabledClassName = getBEMModifier(\r\n    sashClassName,\r\n    'disabled'\r\n);\r\nexport const sashHoverClassName = getBEMModifier(sashClassName, 'hover');\r\n\r\nexport function classNames(...args) {\r\n    const classList: string[] = [];\r\n    for (const arg of args) {\r\n        if (!arg) continue;\r\n        const argType = typeof arg;\r\n        if (argType === 'string' || argType === 'number') {\r\n            classList.push(`${arg}`);\r\n            continue;\r\n        }\r\n        if (argType === 'object') {\r\n            if (arg.toString !== Object.prototype.toString) {\r\n                classList.push(arg.toString());\r\n                continue;\r\n            }\r\n            for (const key in arg) {\r\n                if (Object.hasOwnProperty.call(arg, key) && arg[key]) {\r\n                    classList.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return classList.join(' ');\r\n}\r\n","import React, { useRef, useState, CSSProperties } from 'react';\nimport {\n    classNames,\n    sashHoverClassName,\n    sashClassName\n} from './base';\n\ninterface ISashProps {\n    className?: string;\n    style: CSSProperties;\n    onDragStart: React.MouseEventHandler<HTMLDivElement>;\n    onDragging: React.MouseEventHandler<HTMLDivElement>;\n    onDragEnd: React.MouseEventHandler<HTMLDivElement>;\n}\n\nexport default function Sash({\n    className,\n    onDragStart,\n    onDragging,\n    onDragEnd,\n    ...others\n}: ISashProps) {\n    const timeout = useRef<NodeJS.Timeout>();\n    const [active, setActive] = useState(false);\n    const [draging, setDrag] = useState(false);\n\n    const handleMouseMove = function (e) {\n        onDragging(e);\n    };\n\n    const handleMouseUp = function (e) {\n        setDrag(false);\n        onDragEnd(e);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    return (\n        <div\n            role=\"Resizer\"\n            className={classNames(\n                sashClassName,\n                (draging || active) && sashHoverClassName,\n                className\n            )}\n            onMouseEnter={() => {\n                timeout.current = setTimeout(() => {\n                    setActive(true);\n                }, 150);\n            }}\n            onMouseLeave={() => {\n                if (timeout.current) {\n                    setActive(false);\n                    clearTimeout(timeout.current);\n                }\n            }}\n            onMouseDown={e => {\n                setDrag(true);\n                onDragStart(e);\n\n                window.addEventListener('mousemove', handleMouseMove);\n                window.addEventListener('mouseup', handleMouseUp);\n            }}\n            {...others}\n        />\n    );\n}\n","import React, { ReactNode, useEffect, useMemo, useCallback, useRef, useState } from 'react';\r\nimport { Children, cloneElement, isValidElement } from 'react';\r\nimport Pane, { IPaneConfigs } from './pane';\r\nimport Sash from './sash';\r\nimport {\r\n    classNames,\r\n    paneClassName as paneItemClassName,\r\n    splitClassName,\r\n    splitDragClassName,\r\n    splitVerticalClassName,\r\n    splitHorizontalClassName,\r\n    sashDisabledClassName,\r\n    sashHorizontalClassName,\r\n    sashVerticalClassName\r\n} from './base';\r\n\r\ninterface HTMLElementProps {\r\n    title?: string;\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n    role?: string;\r\n}\r\n\r\ninterface IAxis {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/**\r\n * Clone react children props\r\n * @param children React.ReactNode\r\n * @param props Parent props\r\n */\r\nfunction cloneReactChildren<P>(\r\n    children: React.ReactNode,\r\n    props: P\r\n): React.ReactNode {\r\n    return Children.map(children, (child) => {\r\n        if (isValidElement(child)) {\r\n            return cloneElement(child, props);\r\n        }\r\n        return child;\r\n    });\r\n}\r\n\r\nexport interface ISplitProps extends HTMLElementProps {\r\n    children: JSX.Element[];\r\n    /**\r\n     * Should allowed to resized\r\n     *\r\n     * default is true\r\n     */\r\n    allowResize?: boolean;\r\n    /**\r\n     * How to split the space\r\n     *\r\n     * default is vertical\r\n     */\r\n    split?: 'vertical' | 'horizontal';\r\n    /**\r\n     * Only support controlled mode, so it's required\r\n     */\r\n    sizes: (string | number)[];\r\n    onChange: (sizes: number[]) => void;\r\n    className?: string;\r\n    sashClassName?: string;\r\n    paneClassName?: string;\r\n    /**\r\n     * Specify the size fo resizer\r\n     *\r\n     * defualt size is 4px\r\n     */\r\n    resizerSize?: number;\r\n}\r\n\r\n/**\r\n * Convert size to absolute number or Infinity\r\n */\r\nconst assertsSize = function (\r\n    size: string | number | undefined,\r\n    sum: number,\r\n    defaultValue = Infinity\r\n) {\r\n    if (typeof size === 'undefined') return defaultValue;\r\n    if (typeof size === 'number') return size;\r\n    if (size.endsWith('%')) return sum * (+size.replace('%', '') / 100);\r\n    if (size.endsWith('px')) return +size.replace('px', '');\r\n    return defaultValue;\r\n};\r\n\r\nconst SplitPane = ({\r\n    children,\r\n    sizes: propSizes,\r\n    allowResize = true,\r\n    split = 'vertical',\r\n    className,\r\n    sashClassName,\r\n    paneClassName,\r\n    resizerSize = 4,\r\n    onChange,\r\n    ...others\r\n}: ISplitProps) => {\r\n    const axis = useRef<IAxis>({ x: 0, y: 0 });\r\n    const wrapper = useRef<HTMLDivElement>(null);\r\n    const [wrapperRect, setWrapperRect] = useState({});\r\n    const [draging, setDrag] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const resizeObserver = new ResizeObserver(() => {\r\n            setWrapperRect(wrapper.current!.getBoundingClientRect());\r\n        });\r\n        resizeObserver.observe(wrapper.current!);\r\n        return () => {\r\n            resizeObserver.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    // Get some size infos via split\r\n    const { sizeName, sPos, sAxis } = useMemo(function () {\r\n        return {\r\n            sizeName: split === 'vertical' ? 'width' : 'height',\r\n            sPos: split === 'vertical' ? 'left' : 'top',\r\n            sAxis: split === 'vertical' ? 'x' : 'y'\r\n        };\r\n    }, [split]);\r\n\r\n    const wrapSize: number = wrapperRect[sizeName] ?? 0;\r\n\r\n    // Get limit sizes via children\r\n    const paneLimitSizes = useMemo(function () {\r\n        return children.map(childNode => {\r\n            const limits = [0, Infinity];\r\n            if (childNode.type === Pane) {\r\n                const { minSize, maxSize } = childNode.props as IPaneConfigs;\r\n                limits[0] = assertsSize(minSize, wrapSize, 0);\r\n                limits[1] = assertsSize(maxSize, wrapSize);\r\n            }\r\n            return limits;\r\n        });\r\n    }, [children, wrapSize]);\r\n\r\n    /**\r\n     * SplitPane allows sizes in string and number, but the state sizes only support number,\r\n     * so convert string and number to number in here\r\n     * ```ts\r\n     * 'auto' -> divide the remaining space equally\r\n     * 'xxxpx' -> xxx\r\n     * 'xxx%' -> wrapper.size * xxx/100\r\n     * xxx -> xxx\r\n     * ```\r\n     */\r\n    const sizes = useMemo(function () {\r\n        let count = 0;\r\n        let curSum = 0;\r\n        const res = children.map((_, index) => {\r\n            const size = assertsSize(propSizes[index], wrapSize);\r\n            size === Infinity ? count++ : curSum += size;\r\n            return size;\r\n        });\r\n\r\n        // resize or illegal size input,recalculate pane sizes\r\n        if (curSum > wrapSize || !count && curSum < wrapSize) {\r\n            const cacheNum = (curSum - wrapSize) / curSum;\r\n            return res.map(size => {\r\n                return size === Infinity ? 0 : size - size * cacheNum;\r\n            });\r\n        }\r\n\r\n        if (count > 0) {\r\n            const average = (wrapSize - curSum) / count;\r\n            return res.map(size => {\r\n                return size === Infinity ? average : size;\r\n            });\r\n        }\r\n\r\n        return res;\r\n    }, [...propSizes, children.length, wrapSize]);\r\n\r\n    // Gets dragging axis position\r\n    const sashPosSizes = useMemo(function () {\r\n        return sizes.reduce(function (a, b) {\r\n            return [...a, a[a.length - 1] + b];\r\n        }, [0]);\r\n    }, [...sizes]);\r\n\r\n    const onDragStart = useCallback(function (e) {\r\n        axis.current = { x: e.pageX, y: e.pageY };\r\n        setDrag(true);\r\n    }, []);\r\n\r\n    const onDragging = useCallback(function (e, i) {\r\n        const curAxis = { x: e.pageX, y: e.pageY };\r\n        let distanceX = curAxis[sAxis] - axis.current[sAxis];\r\n\r\n        const leftBorder = -Math.min(\r\n            sizes[i] - paneLimitSizes[i][0],\r\n            paneLimitSizes[i + 1][1] - sizes[i + 1]\r\n        );\r\n        const rightBorder = Math.min(\r\n            sizes[i + 1] - paneLimitSizes[i + 1][0],\r\n            paneLimitSizes[i][1] - sizes[i]\r\n        );\r\n\r\n        if (distanceX < leftBorder) {\r\n            distanceX = leftBorder;\r\n        }\r\n        if (distanceX > rightBorder) {\r\n            distanceX = rightBorder;\r\n        }\r\n\r\n        const nextSizes = [...sizes];\r\n        nextSizes[i] += distanceX;\r\n        nextSizes[i + 1] -= distanceX;\r\n\r\n        onChange(nextSizes);\r\n    }, [paneLimitSizes, onChange]);\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                splitClassName,\r\n                draging && splitDragClassName,\r\n                split === 'vertical' && splitVerticalClassName,\r\n                split === 'horizontal' && splitHorizontalClassName,\r\n                className\r\n            )}\r\n            ref={wrapper}\r\n            {...others}\r\n        >\r\n            {children.map((childNode, childIndex) => {\r\n                const paneClasses = classNames(\r\n                    paneItemClassName,\r\n                    paneClassName\r\n                );\r\n                const paneStyle = {\r\n                    [sizeName]: sizes[childIndex],\r\n                    [sPos]: sashPosSizes[childIndex]\r\n                };\r\n\r\n                let sashChild: ReactNode = null;\r\n                if (childIndex > 0) {\r\n                    sashChild = (\r\n                        <Sash\r\n                            className={classNames(\r\n                                !allowResize && sashDisabledClassName,\r\n                                split === 'vertical'\r\n                                    ? sashVerticalClassName\r\n                                    : sashHorizontalClassName,\r\n                                sashClassName\r\n                            )}\r\n                            style={{\r\n                                [sizeName]: resizerSize,\r\n                                [sPos]: sashPosSizes[childIndex] - resizerSize / 2\r\n                            }}\r\n                            onDragStart={onDragStart}\r\n                            onDragging={e => onDragging(e, childIndex - 1)}\r\n                            onDragEnd={() => {\r\n                                setDrag(false);\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (childNode.type === Pane) {\r\n                    const { className = '', style = {} } = childNode.props;\r\n                    return (\r\n                        <React.Fragment key={childIndex}>\r\n                            {sashChild}\r\n                            {cloneReactChildren(childNode, {\r\n                                className: classNames(paneClasses, className),\r\n                                style: { ...style, ...paneStyle }\r\n                            })}\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <React.Fragment key={childIndex}>\r\n                        {sashChild}\r\n                        <Pane\r\n                            className={paneClasses}\r\n                            style={paneStyle}\r\n                        >\r\n                            {childNode}\r\n                        </Pane>\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplitPane;\r\n"],"names":["children","style","className","role","title","_jsx","others","onDragStart","onDragging","onDragEnd","useRef","useState","setDrag","window","timeout","setActive","clearTimeout","Children","isValidElement","cloneElement","child","propSizes","sashClassName","paneClassName","onChange","useEffect","setWrapperRect","resizeObserver","sizeName","sPos","sAxis","useMemo","minSize","maxSize","limits","size","cacheNum","res","useCallback","axis","pageX","pageY","distanceX","nextSizes","wrapper","paneItemClassName","childIndex","sashChild","resizerSize","_jsxs","React","paneClasses","paneStyle","childNode"],"mappings":"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"}